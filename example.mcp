# Comments

# Define macro 'foo'
def foo
    "say Hello, world"
    @baz # Expand macro 'baz'
end

def baz
    "say OK!"
    @bar
end

def bar
    "say Good, Morning!"
    "execute summon pig run function test:" lambda {
        "say I'm here"
    } "with entity @s"
end

# Define parametric macro
def print(msg)
    "say " $msg # expand parameter
end

# NOTE: mcpreprocessor doesn't process the body of macro,
#       it just saves the body as source for the tokenizer.
#       When macro is called it expands its source and then
#       processes. It allows to implement `X macro`
def list_of_mobs
    @x("zombie")
    @x("pig")
    @x("creeper")
end

# Define function
fn main {
    @foo # Expand macro 'foo'

    # Write double quotes using '\"'
    "tellraw @a {\"text\":\"Hello, world\"}"

    # You can define constants using macro
    def PI "3.14" end
    "say PI is " @PI

    # Example of `X macro` https://en.wikipedia.org/wiki/X_macro
    def x(mob) "summon " $mob end
    @list_of_mobs
    undef x # undef macro 'x'

    # Execute parametric macro 'print'
    # NOTE: Parametric macro accepts only strings as arguments
    @print("Parametric macro")

    # Nested functions
    fn baz {
        # Neseted macro declarations
        def hello
            "say Hello, world"
            "say Well done!"
        end

        @hello

        fn bar {
            "say Bar!"
        }

        "say Baz!"
    }

    # Lambda functions
    # NOTE: Lambda will be replaced with its name
    #       e.g. in this example the code block will be processed
    #       into `function test:main.0 with entity @s`
    "function test:" lambda { "say Hello, world!" } "with entity @s"

    "function test:" lambda {
        "say Hello, world!"

        # Nested lambda functions
        "function test:" lambda { "say Goodbye, world!" }
    }

    # Execute nested functions
    "function test:main.baz"
    "function test:main.baz.bar"

    "say Hello, world"
    "$say Hello, world"
    "execute as @s run function main:setup {a:12, b:13}"
}

fn foo {
    "tellraw @s FIND IT!!!"
}

fn baz {
    "say OK!"
}
